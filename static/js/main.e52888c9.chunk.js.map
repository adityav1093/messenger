{"version":3,"sources":["logo.svg","config.js","lib/chat.js","components/Login.js","components/Groupchat.js","App.js","serviceWorker.js","helpers/history.js","index.js"],"names":["module","exports","CCManager","appSetting","CometChat","AppSettingsBuilder","subscribePresenceForAllUsers","setRegion","build","init","config","uid","text","msgType","TextMessage","RECEIVER_TYPE","USER","MESSAGE_TYPE","TEXT","GROUP","getLoggedinUser","UID","login","this","apiKey","GUID","callback","limit","messagesRequest","MessagesRequestBuilder","setGUID","setLimit","fetchPrevious","message","textMessage","getTextMessage","sendMessage","joinGroup","GROUP_TYPE","PUBLIC","addMessageListener","LISTENER_KEY_MESSAGE","MessageListener","onTextMessageReceived","appId","LISTENER_KEY_GROUP","Login","useState","username","setUserName","isAuthenticated","setIsAuthenticated","user","setUser","isSubmitting","setIsSubmitting","errorMessage","setErrorMessage","useEffect","chat","then","catch","error","console","log","to","pathname","state","className","style","color","onSubmit","e","preventDefault","onChange","target","value","type","src","spinner","alt","disabled","Groupchat","props","handleLogout","localStorage","clear","history","push","sendGroupMessage","messageText","createData","setState","code","response","scrollToBottom","document","getElementById","scrollTop","scrollHeight","handleSubmit","event","reset","handleChange","getUser","messengerCallback","messageListener","data","receiverID","groupMessage","sender","name","prevState","onClick","id","map","index","key","placeholder","React","Component","App","exact","from","path","component","Boolean","window","location","hostname","match","createBrowserHistory","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e52888c9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export default {\r\n  appId: \"20373144ffd654e\",\r\n  apiKey: \"b2c21e3a4975a0990f15f0db3d889616fa829b55\",\r\n  GUID: \"supergroup\"\r\n};\r\n","import { CometChat } from \"@cometchat-pro/chat\";\r\nimport config from \"../config\";\r\nexport default class CCManager {\r\n  static LISTENER_KEY_MESSAGE = \"msglistener\";\r\n  static appId = config.appId;\r\n  static apiKey = config.apiKey;\r\n  static LISTENER_KEY_GROUP = \"grouplistener\";\r\n\r\n  static init() {\r\n    var appSetting = new CometChat.AppSettingsBuilder()\r\n      .subscribePresenceForAllUsers()\r\n      .setRegion(\"us\")\r\n      .build();\r\n\r\n    CometChat.init(config.appId, appSetting);\r\n  }\r\n\r\n  static getTextMessage(uid, text, msgType) {\r\n    if (msgType === \"user\") {\r\n      return new CometChat.TextMessage(\r\n        uid,\r\n        text,\r\n        CometChat.RECEIVER_TYPE.USER,\r\n        CometChat.MESSAGE_TYPE.TEXT\r\n      );\r\n    } else {\r\n      return new CometChat.TextMessage(\r\n        uid,\r\n        text,\r\n        CometChat.RECEIVER_TYPE.GROUP,\r\n        CometChat.MESSAGE_TYPE.TEXT\r\n      );\r\n    }\r\n  }\r\n  static getLoggedinUser() {\r\n    return CometChat.getLoggedinUser();\r\n  }\r\n  static login(UID) {\r\n    return CometChat.login(UID, this.apiKey);\r\n  }\r\n  static getGroupMessages(GUID, callback, limit = 30) {\r\n    const messagesRequest = new CometChat.MessagesRequestBuilder()\r\n      .setGUID(GUID)\r\n      .setLimit(limit)\r\n      .build();\r\n    callback();\r\n    return messagesRequest.fetchPrevious();\r\n  }\r\n  static sendGroupMessage(UID, message) {\r\n    const textMessage = this.getTextMessage(UID, message, \"group\");\r\n    return CometChat.sendMessage(textMessage);\r\n  }\r\n  static joinGroup(GUID) {\r\n    return CometChat.joinGroup(GUID, CometChat.GROUP_TYPE.PUBLIC, \"\");\r\n  }\r\n  static addMessageListener(callback) {\r\n    CometChat.addMessageListener(\r\n      this.LISTENER_KEY_MESSAGE,\r\n      new CometChat.MessageListener({\r\n        onTextMessageReceived: textMessage => {\r\n          callback(textMessage);\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport chat from \"../lib/chat\";\r\nimport spinner from \"../logo.svg\";\r\n\r\nconst Login = () => {\r\n  const [username, setUserName] = useState(\"\");\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [user, setUser] = useState(\"\");\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    chat.init();\r\n  }, []);\r\n\r\n  const onSubmit = e => {\r\n    if (username !== \"\") {\r\n      e.preventDefault();\r\n      login();\r\n    }\r\n  };\r\n\r\n  const toggleIsSubmittingTrue = () => {\r\n    setIsSubmitting(true);\r\n  };\r\n\r\n  const toggleIsSubmittingFalse = () => {\r\n    setIsSubmitting(false);\r\n  };\r\n\r\n  const handleInputChange = e => {\r\n    setUserName(e.target.value);\r\n  };\r\n\r\n  const login = () => {\r\n    toggleIsSubmittingTrue();\r\n    chat\r\n      .login(username)\r\n      .then(user => {\r\n        setUser(user);\r\n        setIsAuthenticated(true);\r\n      })\r\n      .catch(error => {\r\n        setErrorMessage(\"Please enter a valid username\");\r\n        toggleIsSubmittingFalse();\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {isAuthenticated && (\r\n        <Redirect\r\n          to={{\r\n            pathname: \"/chat\",\r\n            state: { user: user }\r\n          }}\r\n        />\r\n      )}\r\n      <div className=\"App\">\r\n        <h1 style={{ color: \"Grey\" }}>GROUP MESSENGER BY AV</h1>\r\n\r\n        <form className=\"form\" onSubmit={onSubmit}>\r\n          <input onChange={handleInputChange} type=\"text\" />\r\n          <span className=\"error\">{errorMessage}</span>\r\n          <div></div>\r\n          {isSubmitting ? (\r\n            <img src={spinner} alt=\"Spinner component\" className=\"App-logo\" />\r\n          ) : (\r\n            <input type=\"submit\" disabled={username === \"\"} value=\"LOGIN\" />\r\n          )}\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport chat from \"../lib/chat\";\r\nimport config from \"../config\";\r\n\r\nclass Groupchat extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      receiverID: \"\",\r\n      messageText: null,\r\n      groupMessage: [],\r\n      user: {},\r\n      isAuthenticated: true\r\n    };\r\n    this.GUID = config.GUID;\r\n  }\r\n\r\n  handleLogout = () => {\r\n    localStorage.clear();\r\n    this.props.history.push(\"/\");\r\n  };\r\n\r\n  createData(data) {\r\n    let sender = {};\r\n    if (data) {\r\n      sender = {\r\n        uid: data.sender.uid,\r\n        name: data.sender.name,\r\n        message: data.data.text\r\n      };\r\n    } else {\r\n      let user = this.state.user;\r\n      let messageText = this.state.messageText;\r\n      sender = {\r\n        uid: user.uid,\r\n        name: user.name,\r\n        message: messageText\r\n      };\r\n    }\r\n\r\n    this.setState(\r\n      prevState => ({\r\n        groupMessage: [...prevState.groupMessage, sender]\r\n      }),\r\n      () => {\r\n        this.scrollToBottom();\r\n      }\r\n    );\r\n  }\r\n\r\n  sendMessage = () => {\r\n    chat.sendGroupMessage(this.GUID, this.state.messageText).then(\r\n      message => {\r\n        console.log(\"Message sent successfully:\", message);\r\n        this.createData(null);\r\n        this.setState({ messageText: null });\r\n      },\r\n      error => {\r\n        if (error.code === \"ERR_NOT_A_MEMBER\") {\r\n          chat.joinGroup(this.GUID).then(response => {\r\n            this.sendMessage();\r\n          });\r\n        } else {\r\n          console.log(error);\r\n        }\r\n      }\r\n    );\r\n  };\r\n  scrollToBottom = () => {\r\n    const chat = document.getElementById(\"chatList\");\r\n    chat.scrollTop = chat.scrollHeight;\r\n  };\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    this.sendMessage();\r\n    event.target.reset();\r\n  };\r\n  handleChange = event => {\r\n    this.setState({ messageText: event.target.value });\r\n  };\r\n  getUser = () => {\r\n    chat\r\n      .getLoggedinUser()\r\n      .then(user => {\r\n        console.log(\"user details:\", { user });\r\n        this.setState({ user });\r\n      })\r\n      .catch(({ error }) => {\r\n        if (error && error.code === \"USER_NOT_LOGED_IN\") {\r\n          this.setState({\r\n            isAuthenticated: false\r\n          });\r\n        }\r\n      });\r\n  };\r\n\r\n  messengerCallback = textMessage => {\r\n    console.log(textMessage);\r\n  };\r\n\r\n  messageListener = () => {\r\n    chat.addMessageListener((data, error) => {\r\n      if (error) return console.log(`error: ${error}`);\r\n      this.createData(data);\r\n    });\r\n  };\r\n  componentDidMount() {\r\n    this.getUser();\r\n    this.messageListener();\r\n    // chat.joinGroup(this.GUID)\r\n  }\r\n\r\n  render() {\r\n    const { isAuthenticated } = this.state;\r\n    if (!isAuthenticated) {\r\n      return <Redirect to=\"/\" />;\r\n    }\r\n    return (\r\n      <div>\r\n        <div>\r\n          <h3>\r\n            Messenger Mode :<span style={{ color: \"Grey\" }}> Group Chat </span>{\" \"}\r\n            .... Current User :{\" \"}\r\n            <span style={{ color: \"Orange\" }}>{this.state.user.name} </span>\r\n          </h3>\r\n          <button\r\n            className=\"btn btn-primary float-right\"\r\n            onClick={this.handleLogout}\r\n          >\r\n            LogOut\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"chatWindow\">\r\n          <ul className=\"chat\" id=\"chatList\">\r\n            {this.state.groupMessage.map((sender, index) => (\r\n              <div key={index}>\r\n                {this.state.user.uid === sender.uid ? (\r\n                  <li className=\"self\">\r\n                    <div className=\"msg\">\r\n                      <p>{sender.name}</p>\r\n                      <div className=\"message\" style={{ color: \"Orange\" }}>\r\n                        {\" \"}\r\n                        {sender.message}\r\n                      </div>\r\n                    </div>\r\n                  </li>\r\n                ) : (\r\n                  <li className=\"other\">\r\n                    <div className=\"msg\">\r\n                      <p>{sender.name}</p>\r\n                      <div className=\"message\" style={{ color: \"red\" }}>\r\n                        {\" \"}\r\n                        {sender.message}{\" \"}\r\n                      </div>\r\n                    </div>\r\n                  </li>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </ul>\r\n          <div className=\"chatInputWrapper\">\r\n            <form onSubmit={this.handleSubmit}>\r\n              <input\r\n                className=\"textarea input\"\r\n                type=\"text\"\r\n                placeholder=\"Enter your message...\"\r\n                onChange={this.handleChange}\r\n              />\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Groupchat;\r\n","import React, { Component } from \"react\";\nimport { Route, Redirect, Switch } from \"react-router-dom\";\nimport \"./App.css\";\n// the below components will be created shortly\nimport Login from \"./components/Login\";\nimport Groupchat from \"./components/Groupchat\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <Switch>\n        <Redirect exact from=\"/messenger\" to=\"/login\" />\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/chat\" component={Groupchat} />\n      </Switch>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createBrowserHistory } from \"history\";\r\n\r\nexport const history = createBrowserHistory();\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { history } from \"../src/helpers/history\";\n\nReactDOM.render(\n  <Router history={history}>\n    <App />\n  </Router>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}